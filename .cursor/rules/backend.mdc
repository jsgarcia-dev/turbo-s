---
description: Regras espec√≠ficas para o Backend Nest.js
globs: apps/api/**/*
---
## Nest.js Best Practices

### Architecture

- Follow SOLID principles
- Implement layered architecture (Controller, Service, Repository)
- Use Dependency Injection appropriately
- Separate business logic from infrastructure

### Modules and Components

- Create cohesive and independent modules
- Implement Guards for authentication/authorization
- Use Interceptors for data transformation
- Implement Pipes for validation

### Coding Patterns

```typescript
// Example of module structure
@Module({
  imports: [TypeOrmModule.forFeature([Entity])],
  controllers: [EntityController],
  providers: [
    EntityService,
    {
      provide: "CACHE_SERVICE",
      useClass: RedisCacheService,
    },
  ],
  exports: [EntityService],
})
export class EntityModule {}

// Example of controller with decorators
@Controller("entities")
export class EntityController {
  @Get()
  @UseGuards(AuthGuard)
  @UseInterceptors(TransformInterceptor)
  async findAll(@Query() query: QueryDto): Promise<Entity[]> {
    return this.entityService.findAll(query);
  }
}
```

### Error Handling

- Implement global exception filters
- Use Nest-specific exceptions
- Standardize error responses
- Implement proper logging

### Performance

- Use caching when appropriate
- Implement rate limiting
- Optimize database queries
- Use compression middleware

### Installing Dependencies

preference for installing packages and dependencies using PNPM
